// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"sync"
)

// Ensure, that UserRepoMock does implement UserRepo.
// If this is not the case, regenerate this file with moq.
var _ UserRepo = &UserRepoMock{}

// UserRepoMock is a mock implementation of UserRepo.
//
// 	func TestSomethingThatUsesUserRepo(t *testing.T) {
//
// 		// make and configure a mocked UserRepo
// 		mockedUserRepo := &UserRepoMock{
// 			GetUserFunc: func(username string) (string, bool) {
// 				panic("mock out the GetUser method")
// 			},
// 			SetUserFunc: func(username string, token string)  {
// 				panic("mock out the SetUser method")
// 			},
// 		}
//
// 		// use mockedUserRepo in code that requires UserRepo
// 		// and then make assertions.
//
// 	}
type UserRepoMock struct {
	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(username string) (string, bool)

	// SetUserFunc mocks the SetUser method.
	SetUserFunc func(username string, token string)

	// calls tracks calls to the methods.
	calls struct {
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// Username is the username argument value.
			Username string
		}
		// SetUser holds details about calls to the SetUser method.
		SetUser []struct {
			// Username is the username argument value.
			Username string
			// Token is the token argument value.
			Token string
		}
	}
	lockGetUser sync.RWMutex
	lockSetUser sync.RWMutex
}

// GetUser calls GetUserFunc.
func (mock *UserRepoMock) GetUser(username string) (string, bool) {
	if mock.GetUserFunc == nil {
		panic("UserRepoMock.GetUserFunc: method is nil but UserRepo.GetUser was just called")
	}
	callInfo := struct {
		Username string
	}{
		Username: username,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(username)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//     len(mockedUserRepo.GetUserCalls())
func (mock *UserRepoMock) GetUserCalls() []struct {
	Username string
} {
	var calls []struct {
		Username string
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// SetUser calls SetUserFunc.
func (mock *UserRepoMock) SetUser(username string, token string) {
	if mock.SetUserFunc == nil {
		panic("UserRepoMock.SetUserFunc: method is nil but UserRepo.SetUser was just called")
	}
	callInfo := struct {
		Username string
		Token    string
	}{
		Username: username,
		Token:    token,
	}
	mock.lockSetUser.Lock()
	mock.calls.SetUser = append(mock.calls.SetUser, callInfo)
	mock.lockSetUser.Unlock()
	mock.SetUserFunc(username, token)
}

// SetUserCalls gets all the calls that were made to SetUser.
// Check the length with:
//     len(mockedUserRepo.SetUserCalls())
func (mock *UserRepoMock) SetUserCalls() []struct {
	Username string
	Token    string
} {
	var calls []struct {
		Username string
		Token    string
	}
	mock.lockSetUser.RLock()
	calls = mock.calls.SetUser
	mock.lockSetUser.RUnlock()
	return calls
}
