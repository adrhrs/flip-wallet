// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repository

import (
	"github.com/flip-clean/models"
	"sync"
)

// Ensure, that BalanceRepoMock does implement BalanceRepo.
// If this is not the case, regenerate this file with moq.
var _ BalanceRepo = &BalanceRepoMock{}

// BalanceRepoMock is a mock implementation of BalanceRepo.
//
// 	func TestSomethingThatUsesBalanceRepo(t *testing.T) {
//
// 		// make and configure a mocked BalanceRepo
// 		mockedBalanceRepo := &BalanceRepoMock{
// 			GetBalanceFunc: func(username string) (int, bool) {
// 				panic("mock out the GetBalance method")
// 			},
// 			GetTopTransactionByUserFunc: func(username string) []models.UserTransaction {
// 				panic("mock out the GetTopTransactionByUser method")
// 			},
// 			GetTopUserByTransactionFunc: func() []models.UserDebitTransaction {
// 				panic("mock out the GetTopUserByTransaction method")
// 			},
// 			GetUserDebitValueFunc: func(username string) int {
// 				panic("mock out the GetUserDebitValue method")
// 			},
// 			IncBalanceFunc: func(username string, increment int) error {
// 				panic("mock out the IncBalance method")
// 			},
// 			SetTopTransactionByUserFunc: func(username string, value []models.UserTransaction) error {
// 				panic("mock out the SetTopTransactionByUser method")
// 			},
// 			SetTopUserByTransactionFunc: func(value []models.UserDebitTransaction) error {
// 				panic("mock out the SetTopUserByTransaction method")
// 			},
// 			SetUserDebitValueFunc: func(username string, value int) error {
// 				panic("mock out the SetUserDebitValue method")
// 			},
// 		}
//
// 		// use mockedBalanceRepo in code that requires BalanceRepo
// 		// and then make assertions.
//
// 	}
type BalanceRepoMock struct {
	// GetBalanceFunc mocks the GetBalance method.
	GetBalanceFunc func(username string) (int, bool)

	// GetTopTransactionByUserFunc mocks the GetTopTransactionByUser method.
	GetTopTransactionByUserFunc func(username string) []models.UserTransaction

	// GetTopUserByTransactionFunc mocks the GetTopUserByTransaction method.
	GetTopUserByTransactionFunc func() []models.UserDebitTransaction

	// GetUserDebitValueFunc mocks the GetUserDebitValue method.
	GetUserDebitValueFunc func(username string) int

	// IncBalanceFunc mocks the IncBalance method.
	IncBalanceFunc func(username string, increment int) error

	// SetTopTransactionByUserFunc mocks the SetTopTransactionByUser method.
	SetTopTransactionByUserFunc func(username string, value []models.UserTransaction) error

	// SetTopUserByTransactionFunc mocks the SetTopUserByTransaction method.
	SetTopUserByTransactionFunc func(value []models.UserDebitTransaction) error

	// SetUserDebitValueFunc mocks the SetUserDebitValue method.
	SetUserDebitValueFunc func(username string, value int) error

	// calls tracks calls to the methods.
	calls struct {
		// GetBalance holds details about calls to the GetBalance method.
		GetBalance []struct {
			// Username is the username argument value.
			Username string
		}
		// GetTopTransactionByUser holds details about calls to the GetTopTransactionByUser method.
		GetTopTransactionByUser []struct {
			// Username is the username argument value.
			Username string
		}
		// GetTopUserByTransaction holds details about calls to the GetTopUserByTransaction method.
		GetTopUserByTransaction []struct {
		}
		// GetUserDebitValue holds details about calls to the GetUserDebitValue method.
		GetUserDebitValue []struct {
			// Username is the username argument value.
			Username string
		}
		// IncBalance holds details about calls to the IncBalance method.
		IncBalance []struct {
			// Username is the username argument value.
			Username string
			// Increment is the increment argument value.
			Increment int
		}
		// SetTopTransactionByUser holds details about calls to the SetTopTransactionByUser method.
		SetTopTransactionByUser []struct {
			// Username is the username argument value.
			Username string
			// Value is the value argument value.
			Value []models.UserTransaction
		}
		// SetTopUserByTransaction holds details about calls to the SetTopUserByTransaction method.
		SetTopUserByTransaction []struct {
			// Value is the value argument value.
			Value []models.UserDebitTransaction
		}
		// SetUserDebitValue holds details about calls to the SetUserDebitValue method.
		SetUserDebitValue []struct {
			// Username is the username argument value.
			Username string
			// Value is the value argument value.
			Value int
		}
	}
	lockGetBalance              sync.RWMutex
	lockGetTopTransactionByUser sync.RWMutex
	lockGetTopUserByTransaction sync.RWMutex
	lockGetUserDebitValue       sync.RWMutex
	lockIncBalance              sync.RWMutex
	lockSetTopTransactionByUser sync.RWMutex
	lockSetTopUserByTransaction sync.RWMutex
	lockSetUserDebitValue       sync.RWMutex
}

// GetBalance calls GetBalanceFunc.
func (mock *BalanceRepoMock) GetBalance(username string) (int, bool) {
	if mock.GetBalanceFunc == nil {
		panic("BalanceRepoMock.GetBalanceFunc: method is nil but BalanceRepo.GetBalance was just called")
	}
	callInfo := struct {
		Username string
	}{
		Username: username,
	}
	mock.lockGetBalance.Lock()
	mock.calls.GetBalance = append(mock.calls.GetBalance, callInfo)
	mock.lockGetBalance.Unlock()
	return mock.GetBalanceFunc(username)
}

// GetBalanceCalls gets all the calls that were made to GetBalance.
// Check the length with:
//     len(mockedBalanceRepo.GetBalanceCalls())
func (mock *BalanceRepoMock) GetBalanceCalls() []struct {
	Username string
} {
	var calls []struct {
		Username string
	}
	mock.lockGetBalance.RLock()
	calls = mock.calls.GetBalance
	mock.lockGetBalance.RUnlock()
	return calls
}

// GetTopTransactionByUser calls GetTopTransactionByUserFunc.
func (mock *BalanceRepoMock) GetTopTransactionByUser(username string) []models.UserTransaction {
	if mock.GetTopTransactionByUserFunc == nil {
		panic("BalanceRepoMock.GetTopTransactionByUserFunc: method is nil but BalanceRepo.GetTopTransactionByUser was just called")
	}
	callInfo := struct {
		Username string
	}{
		Username: username,
	}
	mock.lockGetTopTransactionByUser.Lock()
	mock.calls.GetTopTransactionByUser = append(mock.calls.GetTopTransactionByUser, callInfo)
	mock.lockGetTopTransactionByUser.Unlock()
	return mock.GetTopTransactionByUserFunc(username)
}

// GetTopTransactionByUserCalls gets all the calls that were made to GetTopTransactionByUser.
// Check the length with:
//     len(mockedBalanceRepo.GetTopTransactionByUserCalls())
func (mock *BalanceRepoMock) GetTopTransactionByUserCalls() []struct {
	Username string
} {
	var calls []struct {
		Username string
	}
	mock.lockGetTopTransactionByUser.RLock()
	calls = mock.calls.GetTopTransactionByUser
	mock.lockGetTopTransactionByUser.RUnlock()
	return calls
}

// GetTopUserByTransaction calls GetTopUserByTransactionFunc.
func (mock *BalanceRepoMock) GetTopUserByTransaction() []models.UserDebitTransaction {
	if mock.GetTopUserByTransactionFunc == nil {
		panic("BalanceRepoMock.GetTopUserByTransactionFunc: method is nil but BalanceRepo.GetTopUserByTransaction was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetTopUserByTransaction.Lock()
	mock.calls.GetTopUserByTransaction = append(mock.calls.GetTopUserByTransaction, callInfo)
	mock.lockGetTopUserByTransaction.Unlock()
	return mock.GetTopUserByTransactionFunc()
}

// GetTopUserByTransactionCalls gets all the calls that were made to GetTopUserByTransaction.
// Check the length with:
//     len(mockedBalanceRepo.GetTopUserByTransactionCalls())
func (mock *BalanceRepoMock) GetTopUserByTransactionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetTopUserByTransaction.RLock()
	calls = mock.calls.GetTopUserByTransaction
	mock.lockGetTopUserByTransaction.RUnlock()
	return calls
}

// GetUserDebitValue calls GetUserDebitValueFunc.
func (mock *BalanceRepoMock) GetUserDebitValue(username string) int {
	if mock.GetUserDebitValueFunc == nil {
		panic("BalanceRepoMock.GetUserDebitValueFunc: method is nil but BalanceRepo.GetUserDebitValue was just called")
	}
	callInfo := struct {
		Username string
	}{
		Username: username,
	}
	mock.lockGetUserDebitValue.Lock()
	mock.calls.GetUserDebitValue = append(mock.calls.GetUserDebitValue, callInfo)
	mock.lockGetUserDebitValue.Unlock()
	return mock.GetUserDebitValueFunc(username)
}

// GetUserDebitValueCalls gets all the calls that were made to GetUserDebitValue.
// Check the length with:
//     len(mockedBalanceRepo.GetUserDebitValueCalls())
func (mock *BalanceRepoMock) GetUserDebitValueCalls() []struct {
	Username string
} {
	var calls []struct {
		Username string
	}
	mock.lockGetUserDebitValue.RLock()
	calls = mock.calls.GetUserDebitValue
	mock.lockGetUserDebitValue.RUnlock()
	return calls
}

// IncBalance calls IncBalanceFunc.
func (mock *BalanceRepoMock) IncBalance(username string, increment int) error {
	if mock.IncBalanceFunc == nil {
		panic("BalanceRepoMock.IncBalanceFunc: method is nil but BalanceRepo.IncBalance was just called")
	}
	callInfo := struct {
		Username  string
		Increment int
	}{
		Username:  username,
		Increment: increment,
	}
	mock.lockIncBalance.Lock()
	mock.calls.IncBalance = append(mock.calls.IncBalance, callInfo)
	mock.lockIncBalance.Unlock()
	return mock.IncBalanceFunc(username, increment)
}

// IncBalanceCalls gets all the calls that were made to IncBalance.
// Check the length with:
//     len(mockedBalanceRepo.IncBalanceCalls())
func (mock *BalanceRepoMock) IncBalanceCalls() []struct {
	Username  string
	Increment int
} {
	var calls []struct {
		Username  string
		Increment int
	}
	mock.lockIncBalance.RLock()
	calls = mock.calls.IncBalance
	mock.lockIncBalance.RUnlock()
	return calls
}

// SetTopTransactionByUser calls SetTopTransactionByUserFunc.
func (mock *BalanceRepoMock) SetTopTransactionByUser(username string, value []models.UserTransaction) error {
	if mock.SetTopTransactionByUserFunc == nil {
		panic("BalanceRepoMock.SetTopTransactionByUserFunc: method is nil but BalanceRepo.SetTopTransactionByUser was just called")
	}
	callInfo := struct {
		Username string
		Value    []models.UserTransaction
	}{
		Username: username,
		Value:    value,
	}
	mock.lockSetTopTransactionByUser.Lock()
	mock.calls.SetTopTransactionByUser = append(mock.calls.SetTopTransactionByUser, callInfo)
	mock.lockSetTopTransactionByUser.Unlock()
	return mock.SetTopTransactionByUserFunc(username, value)
}

// SetTopTransactionByUserCalls gets all the calls that were made to SetTopTransactionByUser.
// Check the length with:
//     len(mockedBalanceRepo.SetTopTransactionByUserCalls())
func (mock *BalanceRepoMock) SetTopTransactionByUserCalls() []struct {
	Username string
	Value    []models.UserTransaction
} {
	var calls []struct {
		Username string
		Value    []models.UserTransaction
	}
	mock.lockSetTopTransactionByUser.RLock()
	calls = mock.calls.SetTopTransactionByUser
	mock.lockSetTopTransactionByUser.RUnlock()
	return calls
}

// SetTopUserByTransaction calls SetTopUserByTransactionFunc.
func (mock *BalanceRepoMock) SetTopUserByTransaction(value []models.UserDebitTransaction) error {
	if mock.SetTopUserByTransactionFunc == nil {
		panic("BalanceRepoMock.SetTopUserByTransactionFunc: method is nil but BalanceRepo.SetTopUserByTransaction was just called")
	}
	callInfo := struct {
		Value []models.UserDebitTransaction
	}{
		Value: value,
	}
	mock.lockSetTopUserByTransaction.Lock()
	mock.calls.SetTopUserByTransaction = append(mock.calls.SetTopUserByTransaction, callInfo)
	mock.lockSetTopUserByTransaction.Unlock()
	return mock.SetTopUserByTransactionFunc(value)
}

// SetTopUserByTransactionCalls gets all the calls that were made to SetTopUserByTransaction.
// Check the length with:
//     len(mockedBalanceRepo.SetTopUserByTransactionCalls())
func (mock *BalanceRepoMock) SetTopUserByTransactionCalls() []struct {
	Value []models.UserDebitTransaction
} {
	var calls []struct {
		Value []models.UserDebitTransaction
	}
	mock.lockSetTopUserByTransaction.RLock()
	calls = mock.calls.SetTopUserByTransaction
	mock.lockSetTopUserByTransaction.RUnlock()
	return calls
}

// SetUserDebitValue calls SetUserDebitValueFunc.
func (mock *BalanceRepoMock) SetUserDebitValue(username string, value int) error {
	if mock.SetUserDebitValueFunc == nil {
		panic("BalanceRepoMock.SetUserDebitValueFunc: method is nil but BalanceRepo.SetUserDebitValue was just called")
	}
	callInfo := struct {
		Username string
		Value    int
	}{
		Username: username,
		Value:    value,
	}
	mock.lockSetUserDebitValue.Lock()
	mock.calls.SetUserDebitValue = append(mock.calls.SetUserDebitValue, callInfo)
	mock.lockSetUserDebitValue.Unlock()
	return mock.SetUserDebitValueFunc(username, value)
}

// SetUserDebitValueCalls gets all the calls that were made to SetUserDebitValue.
// Check the length with:
//     len(mockedBalanceRepo.SetUserDebitValueCalls())
func (mock *BalanceRepoMock) SetUserDebitValueCalls() []struct {
	Username string
	Value    int
} {
	var calls []struct {
		Username string
		Value    int
	}
	mock.lockSetUserDebitValue.RLock()
	calls = mock.calls.SetUserDebitValue
	mock.lockSetUserDebitValue.RUnlock()
	return calls
}
